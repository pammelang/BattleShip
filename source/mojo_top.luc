module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    input dpad_up,
    input dpad_down,
    input dpad_left,
    input dpad_right,
    input set,
    input mdg_in[6], //[5:0]
    input mdr_in[6], //[11:6]
    input mu_in[6], //[17:12]
    input yd_in[6], //[23:18]
    input yu_in[6], //[29:24]
    
    output mdg_out[6], //[5:0] - need to assign to io-ports but HOW?
    output mdr_out[6], //[11:6]
    output mu_out[6] //[17:12]
    //input yd_array[23:18],
    //input yu_array[29:23]
  ) {
  
  sig rst;                  // reset signal
  var i;                    // to iterate the input/output lists
  //var yd;
  //var yu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    //initialise the pointer to start at central point of matrix
    
    if (set != 1){
      if (dpad_up == 1){
        for (i=0;i<6;i++){
          if (mdg_in[i] == 1){
            mdg_out[i+1] = 1;
          }
        }
      }else if (dpad_down == 1){
         for (i=0;i<6;i++){
          if (mdg_in[i] == 1){
            mdg_out[i-1] = 1;
          }
        }
      }else if (dpad_left == 1){
        for (i=0;i<6;i++){
          if (mu_in[i] == 1){
            mu_out[i-1] = 1;
          }
        }
  
      } else if (dpad_right == 1){
          for (i=0;i<6;i++){
          if (mu_in[i] == 1){
            mu_out[i+1] = 1;
          }
        }
      }
    }

    
    
    
    
    
  }
}